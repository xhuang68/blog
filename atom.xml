<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Xiao</title>
 <link href="http://xiaohuang.rocks/atom.xml" rel="self"/>
 <link href="http://xiaohuang.rocks/"/>
 <updated>2016-03-20T08:03:21+00:00</updated>
 <id>http://xiaohuang.rocks</id>
 <author>
   <name>Xiao Huang</name>
   <email>henryhuang1989@gmail.com</email>
 </author>

 
 <entry>
   <title>Swift Optional 的嵌套</title>
   <link href="http://xiaohuang.rocks/2016/03/19/a-optional/"/>
   <updated>2016-03-19T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/19/a-optional</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/img/20160319/0.png&quot; alt=&quot;intro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Swift 的世界里，一切皆对象，包括 Int Float 这些基本数据类型，所以我们可以这么写：&lt;code class=&quot;highlighter-rouge&quot;&gt;print(1.description)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而对象一般都是存储在指针中，Swift 也不例外，这就造成了一个问题，指针为空的情况需要处理。在 Objective-C 中，向一个 nil 的对象发消息是默认不产生任何效果的行为，但是在 Swift 中，这种行为被严格地禁止了。&lt;/p&gt;

&lt;p&gt;Swift 是一个强类型语言，它希望在编译期做更多的安全检查，所以引入了类型推断。而类型推断上如果要做到足够的安全，避免空指针调用是一个最基本的要求。于是，Optional 这种类型出现了。Optional 在 Swift 语言中其实是一个枚举类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Reflectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilLiteralConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;准备&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;王巍的 &lt;a href=&quot;http://swifter.tips/buy&quot;&gt;Swifter&lt;/a&gt; 一书中，介绍了一个有用的命令：在 LLDB 中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;fr v -R foo&lt;/code&gt;, 可以查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; 这个变量的内存构成。我们稍后的分析将用到这个命令。&lt;/p&gt;

&lt;h3 id=&quot;optional-&quot;&gt;&lt;strong&gt;Optional 的嵌套&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Optional 类型的变量，在使用时，大多需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 的方式来解包。如果你没有解包而直接使用，编辑器通过类型推断会提示你，所以看起来这套机制工作得很好。但是，如果 Optional 嵌套层次太多，就会造成一些麻烦，下面我们来看一个例子:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在这个机制中，1 这个 Int 值被层层 Optional 包裹，我们用刚刚提到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;fr v -R&lt;/code&gt;, 可以很好的看出来内部结构。如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从这个示例代码中，我们能看出来多层嵌套的 Optional 的具体内存结构。这个内存结构其实是一个类似二叉树一样的形状，如下图所示：&lt;br /&gt;
&lt;img src=&quot;/img/20160319/1.jpg&quot; alt=&quot;tree&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一层二叉树有两个可选的值，一个值是 .None，另一个值类型是 Optional&amp;lt;Optional&lt;int&gt;&amp;gt;。&lt;/int&gt;&lt;/li&gt;
  &lt;li&gt;第二层二叉树有两个可选的值，一个值是 .None，另一个值类型是 Optional&lt;int&gt;。&lt;/int&gt;&lt;/li&gt;
  &lt;li&gt;第三层二叉树有两个可选的值，一个值是 .None，另一个值类型是 Int。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么问题来了，看起来这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional.None&lt;/code&gt; 可以出现在每一层，那么在每一层的效果一样吗？我做了如下实验：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果你在 playground 上看，它们的值都是 nil，但是它们的内存布局却不一样，特别是变量 c 和 变量 d：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;变量 c 因为是多层嵌套的 nil，所以它在最外层的二叉树上的值，是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;Int&amp;gt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;变量 d 因为是直接赋值成 nil，所以它在最外层的二叉树上的值，是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional.None&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;麻烦的事情来了，以上原因会造成用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 来判断变量 c 是否为 nil 失效了。如下代码最终会输出 &lt;code class=&quot;highlighter-rouge&quot;&gt;c is not none&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c is not none&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;这个问题的根源是：一个 Optional 类型的变量可以接受一个非 Optional 的值。拿上面的代码举例，a 的类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int?&lt;/code&gt;，b 的类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int??&lt;/code&gt;，但是 a 的值却可以赋值给 b。所以，变量 b（类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int??&lt;/code&gt;），它可以接受以下几种类型的赋值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; 类型&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Int?&lt;/code&gt; 类型&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Int??&lt;/code&gt; 类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按理说，Swift 是强类型，等号左右两边的类型不完全一样，为什么能够赋值成功呢？查了一下 Optional 的源码，原来是对于上面第 1，2 种类型不一样的情况，Optional 定义了构造函数来构造出一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int??&lt;/code&gt; 类型的值，这样构造之后，等号左右两边就一样了。源码来自 &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift&quot;&gt;Apple&lt;/a&gt;，摘录如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Reflectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilLiteralConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unavailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renamed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrapped&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;/// Construct a `nil` instance.
&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@_transparent&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;/// Construct a non-`nil` instance that stores `some`.
&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@_transparent&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以上代码中，Optional 提供了两种构造函数，完成了刚刚提到的类型转换工作。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;以下代码来自 &lt;a href=&quot;https://github.com/lingoer&quot;&gt;傅若愚&lt;/a&gt; 在不久前 &lt;a href=&quot;http://atswift.io/#speaker&quot;&gt;Swift 大会&lt;/a&gt; 上的一段分享：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;justReturnNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;justReturnNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以下是代码执行结果：&lt;br /&gt;
&lt;img src=&quot;/img/20160319/2.png&quot; alt=&quot;demo1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到，我们想通过给这个 Dictionary 设置一个 nil，来删除掉这个 key-value 对。但是从 playground 的执行结果上看，key 并没有被删掉。&lt;/p&gt;

&lt;p&gt;为了测试到底设置什么样的值，才能正常地删掉这个 key-value 键值对，做了如下实验：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// first try
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// second try
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// third try
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// forth try
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nilValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nilValue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fifth try
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nilValue2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nilValue2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;执行结果如下：&lt;br /&gt;
&lt;img src=&quot;/img/20160319/3.png&quot; alt=&quot;demo2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到，以下三种方式可以成功删除 key-value 键值对：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dict[&quot;key&quot;] = Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dict[&quot;key&quot;] = nil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let nilValue2:String?? = nil; dict[&quot;key&quot;] = nilValue2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，我们发现，一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;[String: String?]&lt;/code&gt; 的 Dictionary，可以接受以下类型的赋值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要删除这个 Dictionary 中的元素，必须传入 nil 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt; ，而如果传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;String&amp;gt;.None&lt;/code&gt;，则不能正常删除元素。那这种现象的原因是什么呢？&lt;/p&gt;

&lt;p&gt;还好苹果把它的实现开源了，那我们来一起看看吧，源文件来自 &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/HashedCollections.swift.gyb&quot;&gt;Apple&lt;/a&gt;, 以下是关键代码。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_variantStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maybeGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// FIXME(performance): this loads and discards the old value.
&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_variantStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updateValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// FIXME(performance): this loads and discards the old value.
&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;removeValueForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所以，当 Dictionary 的 value 类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 时，如果你要设置它的值，它接受的是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt; 类型的参数。而因为我们刚刚例子中的 value 类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt;，所以正常情况下它需要的是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt; 类型的参数。在上面的失败的例子中，我们传递的是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt; 类型的值，具体值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;String&amp;gt;.None&lt;/code&gt;，于是在执行时就会按以下的步骤来进行：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们传递一个值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;String&amp;gt;.None&lt;/code&gt;，类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt; 的参数。&lt;/li&gt;
  &lt;li&gt;因为传的参数类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;String?&lt;/code&gt;，而函数需要的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt;，所以会执行 Optional 的构造函数，构造一个两层的 Optional。&lt;/li&gt;
  &lt;li&gt;这个两层 Optional 的值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional.Some(&amp;lt;Optional&amp;lt;String&amp;gt;.None&amp;gt;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;进入到 Dictionary 的实现时，会用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 进行是否为 nil 的判断，因为两层的 Optional，所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 判断它不是 nil。&lt;/li&gt;
  &lt;li&gt;所以代码执行到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_variantStorage.updateValue(x, forKey: key)&lt;/code&gt;，把 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional.None&lt;/code&gt; 当成值，设置给了相应的 key。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你没理解，可以再翻翻最初我们对多层嵌套 nil 变量的实验和分析。&lt;/p&gt;

&lt;p&gt;我们再看看传递参数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt; 的情况，步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们传递一个值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt;，类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt; 的参数。&lt;/li&gt;
  &lt;li&gt;因为参数类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt;，函数需要的类型也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;String??&lt;/code&gt;，所以参数不经变换，直接进入函数调用中。&lt;/li&gt;
  &lt;li&gt;这个时候参数的值不变，还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;进入到 Dictionary 的实现时，会用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 进行是否为 nil 的判断，&lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt;.None&lt;/code&gt; 用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 判断，得到它是 nil。&lt;/li&gt;
  &lt;li&gt;所以代码执行到 &lt;code class=&quot;highlighter-rouge&quot;&gt;removeValueForKey(key)&lt;/code&gt;，Dictionary 删除了相应的 key-value 键值对。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Optional 可以多层嵌套。&lt;/li&gt;
  &lt;li&gt;因为 Optional 的构造函数支持，所以可以将一个类型为 T 的值，赋值给一个类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;T?&lt;/code&gt; 的变量。&lt;/li&gt;
  &lt;li&gt;因为 Optional 的构造函数支持，所以可以将 nil 赋值给一个任意嵌套层数的 Optional 变量。&lt;/li&gt;
  &lt;li&gt;将 Optional 嵌套的内容是 nil 时，大家要小心 &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; 操作失效问题。&lt;/li&gt;
  &lt;li&gt;多层 Optional 嵌套容易烧脑细胞，尽量避免在工程中使用或触发。&lt;/li&gt;
  &lt;li&gt;遇到问题可以翻翻苹果在 Github 开源的 &lt;a href=&quot;https://github.com/apple/swift&quot;&gt;Swift 源码&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>静态页面生成器装备持续集成 · 下</title>
   <link href="http://xiaohuang.rocks/2016/03/18/a-travisci/"/>
   <updated>2016-03-18T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/18/a-travisci</id>
   <content type="html">&lt;p&gt;之前的两篇文章已经理顺了思路，实现起来也就容易不少。每个步骤网上都能查阅到相当多的资料，这里简单记录一下我的过程。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;dev-repo--pages-repo&quot;&gt;&lt;strong&gt;准备 Dev repo 和 Pages repo&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;这一步实际上就是在 GitHub 上建立起对应的代码库，我这里选择的是在统一代码库下建立 dev 和 gh-pages 两个 branch，回忆一下，如果是 User site 负责部署的 branch 应该是 master。&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;&lt;strong&gt;准备 Jekyll&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在 dev 分支上安装 Jekyll 或者其他框架所需要的基本文件，包括主题、日志等，然后提交。这里有 &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll 安装文档&lt;/a&gt; 和 &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;Hexo 安装文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;&lt;strong&gt;准备 Travis CI&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在 Travis CI 官网进行登录，选择自己需要的 GitHub 代码库进行同步，并且打开此代码库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build only if .travis.yml is present&lt;/code&gt; 设置选项。此时准备工作基本就绪，只需要在 dev 分支上进行 .travis.yml 文件的配置然后 commit 和 push，即可开启整个工作流。&lt;/p&gt;

&lt;h3 id=&quot;travisyml-&quot;&gt;&lt;strong&gt;配置 .travis.yml 文件&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Travis 的配置文件主要有三个内容：告诉 Travis CI 的虚拟机建立什么样的语言环境；告诉此虚拟机安装哪些依赖来构建合理的编译环境；告诉虚拟机执行哪些脚本来对框架进行编译构建以及部署。其中还涉及到一个非常重要的问题，即是赋予虚拟机对于 GitHub 代码库进行有限操作的权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;权限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们当然不会把 GitHub 的账号密码明文地放到 .travis.yml 文档里秀给大家看，所以给 Travis CI 授权一般有两种方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过 SSH key 配置加密私钥，再通过配置 push 时的 SSH 来授权 Travis 对 GitHub 的访问。这个方法的具体实现可以参见这篇文章：&lt;a href=&quot;https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/&quot;&gt;用 Travis CI 自動部署網站到 GitHub&lt;/a&gt;, 这篇文章同样也详细介绍了如何为 Hexo 配置 .travis.yml 文件。&lt;/li&gt;
  &lt;li&gt;通过 GitHub 的 &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Personal Access Token&lt;/a&gt; 来对 Travis CI 进行授权。我采用的就是这种方式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;.travis.yml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我配置 Travis 的具体步骤如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 GitHub 新建一个 Personal Access Token, 命名可以类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis deployment for repo &amp;lt;YOUR_REPO&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;在本地安装 Travis: &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install travis&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;配置 Genfile，告知 Travis 虚拟机安装指定程序及依赖。我的 Gemfile 内容如下，之后虚拟机会自动从源下载并安装文件中的程序及依赖：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

gem &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;
gem &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;为你的代码库新建 .travis.yml 文件，我的文件内容如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;language: ruby
rvm:
- 2.2

bundler_args: &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;

branches:
  only:
  - dev

before_install:
- git config --global user.name &lt;span class=&quot;s2&quot;&gt;&quot;Travis CI&quot;&lt;/span&gt;
- git config --global user.email &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

script:
- bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build

after_success:
- git clone https://&lt;span class=&quot;nv&quot;&gt;$GITHUB_REPO&lt;/span&gt;
- &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_REPO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.git&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
- rsync -az --delete --exclude &lt;span class=&quot;s1&quot;&gt;&#39;.git*&#39;&lt;/span&gt; ../_site/ .
- touch .nojekyll
- git add -A .
- git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Generated Jekyll site by Travis CI - &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TRAVIS_BUILD_NUMBER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
- git push --force &lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEPLOY_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_REPO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; HEAD:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPO_TARGET_BRANCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

env:
  global:
  - &lt;span class=&quot;nv&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
  - GITHUB_REPO: github.com/YOUR_USERNAME/YOUR_REPO_NAME.git
  - REPO_TARGET_BRANCH: master
  - GH_REF: github.com/YOUR_USERNAME/YOUR_REPO_NAME.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个文件当中， &lt;code class=&quot;highlighter-rouge&quot;&gt;language&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm&lt;/code&gt; 设置了 Travis 虚拟机的语言配置环境及版本，&lt;code class=&quot;highlighter-rouge&quot;&gt;branches&lt;/code&gt; 说明了 Travis 仅能操作 dev 分支。接下来三部分的脚本分别是安装制定程序前对 Travis git 的配置，安装后执行的测试脚本，测试脚本成功后的操作指令（发布到网页的指定分支）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用 Travis 的 secret 属性来加密你的 Email 和新建的 Token，并且添加到 .travis.yml 文件中:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# fill with Github verified email address
&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;me@domain.com --add  

&lt;span class=&quot;c&quot;&gt;# fill with your personal access token
&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;DEPLOY_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;token --add  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;把上面文档中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;GITHUB_REPO&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;REPO_TARGET_BRANCH&lt;/code&gt; 更换成你自己的代码库和需要更新的 branch.&lt;/li&gt;
  &lt;li&gt;Commit and push. Travis 便会自动发现 commit, 编译项目，在 push 回指定分支，完成部署。大功告成！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nick-dunn.co.uk/blog/jekyll-github-travis-ci-sitting-in-a-tree/&quot;&gt;Jekyll + Github pages + Travis CI, sitting in a tree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/domenic/ec8b0fc8ab45f39403dd&quot;&gt;Auto-deploying built products to gh-pages with Travis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>静态页面生成器装备持续集成 · 中</title>
   <link href="http://xiaohuang.rocks/2016/03/17/b-travisci/"/>
   <updated>2016-03-17T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/17/b-travisci</id>
   <content type="html">&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;工作流&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;有了对 Jekyll, Travis CI 和 GitHub Pages 的了解，我们对于自动构建 Jekyll 工作流的构思是：&lt;br /&gt;
本地向 Github 上 push 代码后，如果该代码属于目标源（暂时称为 Dev repo），Travis CI 就自动构建 Jekyll 环境编译它，并将产出的静态博客 push 回我们的 Github pages 源（暂时称为 Pages repo）。然后即可在 pages 上查看新发布的博客。 如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20160317/2.jpg&quot; alt=&quot;intro&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;分解工作流&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;User -&amp;gt; push -&amp;gt; Dev repo&lt;/em&gt;&lt;br /&gt;
事先在 Github 上建立好 repository 即可。有两种方案可供参考：
    &lt;ul&gt;
      &lt;li&gt;建立 username.github.io 源，并开设 dev 分支，将此分支作为 Dev repo. 而 master/gh-pages 分支就是 Pages repo. 这样的好处是只用维护一个 repository.&lt;/li&gt;
      &lt;li&gt;另一种方案，建立两个 repositories, 一个作为 Dev repo, 另一个 username.github.io 源就作 Pages repo. 此方案的好处是可以开设多个项目 pages.
我采用的是前一种方案。其实两种方案实现代码基本相同，使用第二种方案时注意最后配置正确 Pages repo 的 push 路径和权限即可。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Dev repo -&amp;gt; sync -&amp;gt; Travis CI&lt;/em&gt;
在 Travis CI 中开启 Dev repo 的同步开关，然后在 Dev repo 中添加 .travis.yml 文件。这样 Travis CI 就能自动同步之后 push 的代码了。另外记得在 Travis CI 的同步设置中启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build only if .travis.yml is present&lt;/code&gt; 项，这样能在 repository 中有多个 branch 时，让 Travis CI 只构建放置了.travis.yml 文件的 branch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Travis CI -&amp;gt; build and push -&amp;gt; Pages repo&lt;/em&gt;&lt;br /&gt;
这里再分解为 build 和 push 两步：
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;build&lt;/em&gt;&lt;br /&gt;
Travis CI 的自动化构建完全依靠唯一的 .travis.yml 脚本文件。需要在此文件中添加构建环境、构建 Jekyll、生成博客及后续 push 到 Pages repo 的全部脚本。有些类似于 Docker 中的 dockerfile。&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;push&lt;/em&gt;&lt;br /&gt;
这一步比较麻烦，涉及到权限设置，加密，下部分会仔细介绍。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;User -&amp;gt; View the pages&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>静态页面生成器装备持续集成 · 上</title>
   <link href="http://xiaohuang.rocks/2016/03/17/a-travisci/"/>
   <updated>2016-03-17T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/17/a-travisci</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/img/20160317/1.jpg&quot; alt=&quot;intro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近把博客全盘折腾成了 Jekyll 静态页面，部署到了 GitHub Pages 上面，并且利用 Travis CI 做了自动化构建和部署。这篇文章是一个简要的备忘记录。上部分主要写概念和工作流，下部分主要记录 Travis 对 Jekyll 的配置细节。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 不用多讲，静态页面生成器。 其它类似的还有 &lt;a href=&quot;https://hexo.io/&quot;&gt;hexo&lt;/a&gt;, &lt;a href=&quot;http://octopress.org/&quot;&gt;octopress&lt;/a&gt; 等等。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;持续集成&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，每人每天可能集成一次，甚至多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;自动构建工具是持续集成的一种出色实践。实际上，代码提交后，由软件自动完成代码的测试、构建，并将过程中状态与构建物产出才是持续集成的意义。Travis CI 就是一个在线的、分布式的持续集成服务，用来构建及测试在 GitHub 托管的代码。这个软件的代码同时也是开源的，提供了多种编程语言的支持，包括 Ruby, JavaScript, Java, Scala, PHP 等。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;原理：Travis CI 会在每一次提交之后生成一个虚拟机来执行事先安排好的 build 任务，你可以调整这个虚拟机的软件环境，甚至能执行 sudo apt-get install 自定义虚拟环境。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;静态页面生成器 + 持续集成&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我们在每次修改添加新文章后，静态页面生成器都需要重新构建、发布，这样的机械化工作交给 Travis CI 再合适不过了。另外，利用 Travis CI 还可以带来很多其他的方便。&lt;/p&gt;

&lt;p&gt;比如，为 &lt;strong&gt;多人协作&lt;/strong&gt; 带来的方便。一般情况下，我们需要本地产生静态档案然后 push 到 GitHub 上。如此这般，对于普通博客或许还算轻松，但是对于偶尔会有的 pull request 就比较麻烦。试想一下，在合并了 pull request 时候，我们必须把最近的 commit 在拉到本地进行手动 build, 之后还需再 push 进行部署。 这样一来，总会有很多麻烦，往往 pull request 合并之后，网页却还未及时更新。&lt;/p&gt;

&lt;p&gt;再比如，为 &lt;strong&gt;测试&lt;/strong&gt; 带来方便。最简单的测试代码是运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; 来确保 Jekyll 对站点的构建不会出错。它并不检查站点的输出结果，而只确保构建正确地进行。当需要测试 Jekyll 的输出结果时，html-proofer 是最佳的工具选择。这个工具会检查输出站点中所有的链接和图片的有效性。可以很方便地使用命令行 &lt;code class=&quot;highlighter-rouge&quot;&gt;htmlproof&lt;/code&gt; 执行该工具，或者写一段 Ruby 代码来执行该 gem。点击 &lt;a href=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;html-proofer&lt;/a&gt; 查看更多细节。利用持续集成，我们可以将此测试部分放到 Travis CI 去，一旦测试通过，网页便可完成自动部署。&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;GitHub Pages 为我们提供了便捷的网页 host 服务，此服务直接来自 GitHub 的代码库。因此我们可以直接编辑代码库然后 push 之后网页就可以及时更新了。&lt;/p&gt;

&lt;p&gt;GitHub Pages 的 Slogan 叫做是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Websites for you and your projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以 GitHub Pages 支持两种设置：&lt;strong&gt;User site&lt;/strong&gt; 和 &lt;strong&gt;Project site&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;异同&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上两种网页设置都是直接由 GitHub 代码库生成，唯一的区别是 User site 的 publishing branch 是 &lt;strong&gt;master&lt;/strong&gt;，而 Project site 的 publishing branch 是 &lt;strong&gt;gh-pages&lt;/strong&gt;。而且每个 GitHub 代码库只支持唯一一个 User site， 但是可以支持多个 Project site。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;域名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages 的域名设置简单明了。User site 拥有一个唯一的域名 &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;，而每个 Project site 则是对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io/projectname&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages 当然支持自定义域名，只需要在代码库中添加 &lt;em&gt;CNAME&lt;/em&gt; 文件即可。&lt;/p&gt;

&lt;p&gt;举个例子，用户 &lt;a href=&quot;https://github.com/muan/&quot;&gt;muan&lt;/a&gt; 拥有一个名为 &lt;a href=&quot;https://github.com/muan/muan.github.com&quot;&gt;muan.github.com&lt;/a&gt; 的 User Pages 代码库，现在我们就可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;muan.github.io&lt;/code&gt; 来访问。接着 muan 为这个代码库添加了一个 &lt;em&gt;CNMAE&lt;/em&gt; 文件，内容为 &lt;code class=&quot;highlighter-rouge&quot;&gt;muan.co&lt;/code&gt;，这意味着我们现在可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;muan.co&lt;/code&gt; 这个 url 来访问代码库。&lt;/p&gt;

&lt;p&gt;除此之外，muan 还拥有一个叫做 &lt;a href=&quot;https://github.com/muan/emoji/&quot;&gt;emoji&lt;/a&gt; 的 Project Pages 代码库。现在这个代码库可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;muan.github.io/emoji&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;muan.co/emoji&lt;/code&gt; 来访问。之后 muan 为这个代码库添加了一个 &lt;em&gt;CNMAE&lt;/em&gt; 文件，内容为 &lt;code class=&quot;highlighter-rouge&quot;&gt;emoji.muan.co&lt;/code&gt;，现在我们则可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;emoji.muan.co&lt;/code&gt; 来访问这个网页了。&lt;/p&gt;

&lt;p&gt;更多关于 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/setting-up-your-pages-site-repository/&quot;&gt;CNAME 设置&lt;/a&gt; 和 &lt;a href=&quot;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&quot;&gt;在 DNS 供应商处设置自定义域名&lt;/a&gt; 的内容。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll 大括号 {% %} 转义</title>
   <link href="http://xiaohuang.rocks/2016/03/16/b-jekyll/"/>
   <updated>2016-03-16T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/16/b-jekyll-{%%}</id>
   <content type="html">&lt;p&gt;使用 GitHub 做静态网站，写文章的时候避免不了要显示大括号这个符号，但是大括号是 Jekyll 的转义字符，所以我们需要想办法输出这个符号了。&lt;/p&gt;

&lt;h3&gt;&lt;b&gt;  {% raw %} {% endraw %} &lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;这是一个 Jekyll 中用来对大括号进行转义的函数。 对于一般的文本，直接将其放到  {% raw %} {% endraw %} 中即可转义， 比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% raw %}

    content

{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;转义代码&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;若是需要对代码进行转义，我的方法是：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight text %}

    {% raw %}

        content

    {% endraw %}

{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;特殊情况&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;如果需要转义  {% raw %} {% endraw %} 自身，直接使用会出错：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% raw %}
{% raw %}
{% endraw %}
{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;解决办法就是将 {% 赋值给一个变量，在需要输出 {% 的时候，输出这个变量的值：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% assign openTag = &#39;{%&#39; %}
{{ openTag }} raw %}
{{ openTag }} endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;其他情况&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;当然，实际操作中还会遇到很多其他情况，比如在写这篇博客的时候，好些代码块的转义都改了很多遍才奏效，实操以灵活为准。如果有需要，可以参考本篇博客的 Markdown 转义表达式。&lt;a href=&quot;https://www.dropbox.com/s/txcjdfni9ec6mig/Jekyll%E8%BD%AC%E4%B9%89%E7%AC%A6.md?dl=0&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll 代码高亮</title>
   <link href="http://xiaohuang.rocks/2016/03/16/a-jekyll-code-highlight/"/>
   <updated>2016-03-16T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2016/03/16/a-jekyll-code-highlight</id>
   <content type="html">&lt;p&gt;在使用 Jekyll 撰写博客的时候，可以通过 &lt;strong&gt;Pygments&lt;/strong&gt; 和 &lt;strong&gt;Rouge&lt;/strong&gt; 来对博文中的代码进行高亮显示。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;pygments&quot;&gt;&lt;strong&gt;Pygments&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll 原生支持 &lt;a href=&quot;http://pygments.org&quot;&gt;Pygments&lt;/a&gt;. Pygments 支持超过100种语言，并且支持多种输出格式，比如 HTML, RTF等等。&lt;/p&gt;

&lt;h3 id=&quot;configyml&quot;&gt;&lt;strong&gt;修改 _config.yml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: pygments&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;pygments-1&quot;&gt;&lt;strong&gt;本地安装 Pygments&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pygments 是基于 Python 的，所以机器上需要安装 Python。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/Pygments&quot;&gt;下载&lt;/a&gt;最新的 Pygments, 下载完成后解压。&lt;/li&gt;
  &lt;li&gt;在解压后的 Pygments 目录中，运行命令：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python setup.py install&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;选择一种喜欢的代码高亮样式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Pygments 提供了多种样式，比如 &lt;em&gt;native&lt;/em&gt;, &lt;em&gt;emacs&lt;/em&gt;, &lt;em&gt;vs&lt;/em&gt; 等等，可以在 &lt;a href=&quot;http://pygments.org/demo&quot;&gt;Pygments Demo&lt;/a&gt; 中选择某种语言的例子，体验不同的样式。&lt;br /&gt;
通过下面的命令可以查看当前支持的样式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygments.styles&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_MAP&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;STYLE_MAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jekyll-&quot;&gt;&lt;strong&gt;选择一种样式，应用在 Jekyll 中&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd &amp;lt;your repository path&amp;gt;/css&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pygmentize -S native -f html &amp;gt; pygments.css&lt;/code&gt; “native”是样式名，“html”是formatter.&lt;/li&gt;
  &lt;li&gt;在 layout 中引用刚刚加的 pygments.css&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;在文章中高亮代码&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;现在，可以在博客中高亮代码了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight java %}
public class HelloWorld {
    public static void main(String args[]) {  
    System.out.println(&quot;Hello World!&quot;);  
    }
}
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rouge&quot;&gt;&lt;strong&gt;Rouge&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll 原生支持 &lt;a href=&quot;http://rouge.jneen.net&quot;&gt;Rouge&lt;/a&gt;. Rouge 支持超过60种语言。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-3-&quot;&gt;&lt;strong&gt;Jekyll 3 默认&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Rouge 是 Jekyll 3 默认的代码高亮工具，对于 Jekyll 2， 需要在配置文件中做如下设置：&lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: rouge&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;在文章中高亮代码&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;现在，可以在博客中高亮代码了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight ruby %}
def foo
  puts &#39;foo&#39;
end
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;行号&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;highlight 中的第二个参数 linenos 为可选参数，此参数可以为代码添加行号：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight ruby linenos %}
def foo
  puts &#39;foo&#39;
end
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>101 Artists to Listen to Before You Die</title>
   <link href="http://xiaohuang.rocks/2015/10/08/a-101-artists/"/>
   <updated>2015-10-08T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/10/08/a-101-artists</id>
   <content type="html">&lt;p&gt;清单一类的东西有时候很有吸引力。最近发现了这一本清单。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;101 Artists to Listen to Before You Die&lt;/em&gt;&lt;/strong&gt; &lt;br /&gt;
&lt;img src=&quot;/img/20151008/1.jpg&quot; alt=&quot;101_1&quot; /&gt;
&lt;img src=&quot;/img/20151008/2.jpg&quot; alt=&quot;101_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一本音乐日记，作者是西班牙插画家和音乐爱好者 &lt;em&gt;Ricardo Cavolo&lt;/em&gt;。在这本书里，他平均用两页纸介绍一位在他生命中有过影响的音乐家。Cavolo 在左边用手写了一些趣闻轶事以及他为什么崇拜他们的复杂思绪，在紧邻的下一页则是一幅署上他名字的生动画像。这并非一本参考书，而是一本色彩斑斓且充满激情的即时日记。 &lt;br /&gt;
&lt;!--more--&gt;
这本书基本上按照音乐家活跃的顺序编写，以巴赫开始，以 Chief Keef 结束，涵盖了许多不同的音乐流派。Cavolo 是这么描述他的音乐生命的：「我们没有唱片——我们很穷——因此我们只有盗版的磁带，我们有大量这样的盗版磁带，在一辆汽车录影机上播放：滚石乐队（Rolling Stones）、Sex Pistols、 Muddy Waters、 Easy Rider OST、 Chuck Berry……他们使我接受了音乐的洗礼。书中没有西班牙的音乐家，因为我成长过程中所听的音乐都来自美国或者英国。所以在某些时候盎格鲁撒克逊音乐成了我的音乐。」&lt;/p&gt;

&lt;p&gt;好奇心日报上有一篇专门讲述书和作者故事的文章，这是&lt;a href=&quot;http://www.qdaily.com/articles/15728.html&quot;&gt;链接&lt;/a&gt;。 &lt;br /&gt;
我在 Amazon 上面购买的这本书，这是&lt;a href=&quot;http://www.amazon.com/101-Artists-Listen-Before-You/dp/1910620009/ref=sr_1_1?ie=UTF8&amp;amp;qid=1444340303&amp;amp;sr=8-1&amp;amp;keywords=101+musician&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>东京物语 · Tokyo Story</title>
   <link href="http://xiaohuang.rocks/2015/10/07/b-tokyo-story/"/>
   <updated>2015-10-07T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/10/07/b-tokyo-story</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/img/20151007/1.jpg&quot; alt=&quot;Tokyo Story&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看了这部1953年的老电影。一开始还不太习惯黑白色调和那个时候略显『僵硬』的演技，但是整部影片绝对不令人失望。
讲述了六十年前的日本，讲述了爱，亲情，战争，生老病死，距离远近和孤独。在这六十年里，城市发生了翻天覆地的变化，
亲人间的家庭关系却依然是原来的样子，甚至因为社会的发展，『家庭』在社会关系里的角色更加紧张，更加令人不知所措。
『东京物语』讲述的就是真实的故事，真实的故事最让人动情。（现在大陆的电影有太多是以煽情博票房，煽情也不错，滥情我不太能接受）&lt;br /&gt;
&lt;!--more--&gt;
关于导演 &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Yasujirō_Ozu&quot;&gt;小津安二郎&lt;/a&gt;&lt;/strong&gt;： &lt;br /&gt;
生卒年：1903年12月12日——1963年12月12日。小津于1963年12月12日因病去世，那天他正好六十岁生日。他的墓碑上，只有一个汉字——“无”。
小津安二郎共执导了54部影片（只有36部存留世间），其中无声片31部，有声片22部，纪录片1部。在他的54部电影中，
有19部入围日本影响最大的影片评选奖项——《电影旬报》年度十大佳片之列，有六次勇夺当年十大佳片的冠军。
小津的获奖率之高，在日本国内众多的名导演中也属遥遥领先。在日本电影史上小津享有广泛的国际声誉，除了其作品有复杂的深度外，无疑该归功於国际学者的多面向研究。&lt;/p&gt;

&lt;p&gt;转发几段影评，来自豆瓣用户 &lt;em&gt;九个远方&lt;/em&gt;：&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;
「《東京物語》和小津的任何一部電影一樣，講著一個家庭倫理的故事。然而，正是隱忍，所以傷懷，簡單的故事裏講述著一個個深沉的主題：愛、別離、孤獨、蒼老、死亡。大喜大悲一壺滄海，到眼前卻只是一杯隔夜茶的苦澀。」
&lt;br /&gt;
&lt;br /&gt;
「把真實的生活展現出來，但並不做價值評判，這使小津的電影呈現了開放的風格。《東京物語》裏，每一個衝突都只是瑣碎的平常小事，因為平常所以親切，因為親切所以真實，真實得使我們任何一個人都可以在電影中找到自己的位置，成為其中角色，同喜同悲。這是一面鏡子。」
&lt;br /&gt;
&lt;br /&gt;
「兒女們未必不愛自己的父母，他們相信自己是愛的，但卻在日常生活的淘洗中漸次失蹤了那份感情，愛與尊敬只剩下一個自以為是的幻影。周吉的大女兒志子就認為自己愛著父母親，而父母們也愛著她，在以工作為由匆忙離開母親的喪禮的時候，臨行志子還拿走了家裏的一包布料。」
&lt;br /&gt;
&lt;br /&gt;
「沒有煽情，但自然感動，小津的電影充滿了靜謐，但並不是一池死水，更像大河之水，流得很慢，看不見速度，但深沉無比。」
&lt;/p&gt;

&lt;p&gt;链接: &lt;br /&gt;
&lt;a href=&quot;http://www.imdb.com/title/tt0046438/?ref_=fn_al_tt_1&quot;&gt;IMDb&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://movie.douban.com/subject/1291568/&quot;&gt;豆瓣电影&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Recent Playlist</title>
   <link href="http://xiaohuang.rocks/2015/10/07/a-recent-playlists/"/>
   <updated>2015-10-07T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/10/07/a-recent-playlists</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Guitar Recital&lt;/strong&gt;  &lt;br /&gt;
&lt;em&gt;John Williams&lt;/em&gt;&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;450&quot; src=&quot;http://music.163.com/outchain/player?type=0&amp;amp;id=113569531&amp;amp;auto=0&amp;amp;height=430&quot;&gt;&lt;/iframe&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;放耳朵去流浪&lt;/strong&gt;  &lt;br /&gt;
&lt;em&gt;范宗沛&lt;/em&gt;&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;450&quot; src=&quot;http://music.163.com/outchain/player?type=0&amp;amp;id=86485755&amp;amp;auto=0&amp;amp;height=430&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>在 markdown 中使用网易云音乐外链播放器</title>
   <link href="http://xiaohuang.rocks/2015/10/06/a-netease-player/"/>
   <updated>2015-10-06T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/10/06/a-netease-player</id>
   <content type="html">&lt;h3 id=&quot;section&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;网易云音乐有两种外链播放器插件。&lt;/p&gt;

&lt;p&gt;一种是 iframe，像这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginwidth=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginheight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;330&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=29734857&amp;amp;auto=1&amp;amp;height=66&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另一种是 flash 插件，像这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;embed&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://music.163.com/style/swf/widget.swf?sid=29734857&amp;amp;type=2&amp;amp;auto=1&amp;amp;width=320&amp;amp;height=66&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;340&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;86&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;allowNetworking=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/embed&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;
&lt;p&gt;### 使用 &lt;br /&gt;
如今很多平台都不支持 flash 了，所以我使用的是 iframe。&lt;/p&gt;

&lt;p&gt;直接使用 iframe 是会直接显示出代码，而不会显示播放器的，需要把 iframe 的&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;标签的值加上双引号，另外我将自动播放的选项关掉了，就像这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginwidth=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginheight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;330&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;86&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=29734857&amp;amp;auto=0&amp;amp;height=66&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=202373&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;section-1&quot;&gt;推荐&lt;/h3&gt;
&lt;p&gt;一首老歌，最近老是听，好听。歌词可以瞎猜猜什么意思。来自地下丝绒，Lou 之后还写过好多首 XXX says，其中的 Caroline says 基本上是这首的翻唱。&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;
Stephanie says&lt;br /&gt;
&lt;small&gt;
&lt;i&gt;The Velvet Underground&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
Stephanie says that she wants to know&lt;br /&gt;
Why she&#39;s given half her life, to people she hates now&lt;br /&gt;
Stephanie says when answering the phone&lt;br /&gt;
What country shall I say is calling from across the world&lt;br /&gt;&lt;br /&gt;

But she&#39;s not afraid to die, the people all call her Alaska&lt;br /&gt;
Between worlds so the people ask her &#39;cause it&#39;s all in her mind&lt;br /&gt;
It&#39;s all in her mind&lt;br /&gt;&lt;br /&gt;

Stephanie says that she wants to know&lt;br /&gt;
Why it is thought she&#39;s the door She can&#39;t be the room&lt;br /&gt;&lt;br /&gt;

Stephanie says but doesn&#39;t hang up the phone&lt;br /&gt;
What sea shell sea is calling from across the world&lt;br /&gt;&lt;br /&gt;

But she&#39;s not afraid to die, the people all call her Alaska&lt;br /&gt;
Between worlds so the people ask her &#39;cause it&#39;s all in her mind&lt;br /&gt;
It&#39;s all in her mind&lt;br /&gt;&lt;br /&gt;

She asks you is it good or bad&lt;br /&gt;
It&#39;s such an icy feeling it&#39;s so cold in Alaska,&lt;br /&gt;
it&#39;s so cold in Alaska, it&#39;s so cold in Alaska
&lt;/small&gt;&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=4334115&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>My favorite podcasts</title>
   <link href="http://xiaohuang.rocks/2015/09/26/a-favourite-podcasts/"/>
   <updated>2015-09-26T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/09/26/a-favourite-podcasts</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://atp.fm&quot;&gt;Accidental Tech Podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theincomparable.com/theincomparable/&quot;&gt;Incomparable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://exponent.fm&quot;&gt;exponent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://daringfireball.net/thetalkshow/&quot;&gt;The Talk Show&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ipn.li/itgonglun/&quot;&gt;IT 公论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ipn.li/xuanmei/&quot;&gt;选·美&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ipn.li/taiyilaile/&quot;&gt;太医来了&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ipn.li/kernelpanic/&quot;&gt;内核恐慌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ipn.li/bowuzhi/&quot;&gt;博物志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/podcast/pu-su-xin-li-xue/id664461592?mt=2&quot;&gt;朴素心理学&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tangsuanradio.com&quot;&gt;糖蒜广播&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Beginning</title>
   <link href="http://xiaohuang.rocks/2015/01/01/a-beginning/"/>
   <updated>2015-01-01T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2015/01/01/a-beginning</id>
   <content type="html">&lt;p&gt;This is my first article in this blog.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="http://xiaohuang.rocks/2014/12/12/a-hello/"/>
   <updated>2014-12-12T00:00:00+00:00</updated>
   <id>http://xiaohuang.rocks/2014/12/12/a-hello</id>
   <content type="html">&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;Hello World!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xiaohuang.rocks&quot;&gt;Hello World!&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
